{"name": "test_correct_login[18883245086-eb1019EBD11]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchFrameException: Message: passport_iframe", "trace": "self = <selenium.webdriver.remote.switch_to.SwitchTo object at 0x000001C792AA09D0>, frame_reference = 'passport_iframe'\n\n    def frame(self, frame_reference: Union[str, int, WebElement]) -> None:\n        \"\"\"Switches focus to the specified frame, by index, name, or\n        webelement.\n    \n        :Args:\n         - frame_reference: The name of the window to switch to, an integer representing the index,\n                            or a webelement that is an (i)frame to switch to.\n    \n        :Usage:\n            ::\n    \n                driver.switch_to.frame('frame_name')\n                driver.switch_to.frame(1)\n                driver.switch_to.frame(driver.find_elements(By.TAG_NAME, \"iframe\")[0])\n        \"\"\"\n        if isinstance(frame_reference, str):\n            try:\n>               frame_reference = self._driver.find_element(By.ID, frame_reference)\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\switch_to.py:88: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:738: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001C792AA0AF0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...07FF75CE4CC83]\\\\n\\\\tBaseThreadInitThunk [0x00007FF9925053E0+16]\\\\n\\\\tRtlUserThreadStart [0x00007FF9946A485B+43]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"[id=\"passport_iframe\"]\"}\nE         (Session info: chrome=118.0.5993.90); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF75CEE8EF2+54786]\nE       \t(No symbol) [0x00007FF75CE55612]\nE       \t(No symbol) [0x00007FF75CD0A64B]\nE       \t(No symbol) [0x00007FF75CD4B79C]\nE       \t(No symbol) [0x00007FF75CD4B91C]\nE       \t(No symbol) [0x00007FF75CD86D87]\nE       \t(No symbol) [0x00007FF75CD6BEAF]\nE       \t(No symbol) [0x00007FF75CD84D02]\nE       \t(No symbol) [0x00007FF75CD6BC43]\nE       \t(No symbol) [0x00007FF75CD40941]\nE       \t(No symbol) [0x00007FF75CD41B84]\nE       \tGetHandleVerifier [0x00007FF75D237F52+3524194]\nE       \tGetHandleVerifier [0x00007FF75D28D800+3874576]\nE       \tGetHandleVerifier [0x00007FF75D285D7F+3843215]\nE       \tGetHandleVerifier [0x00007FF75CF85086+694166]\nE       \t(No symbol) [0x00007FF75CE60A88]\nE       \t(No symbol) [0x00007FF75CE5CA94]\nE       \t(No symbol) [0x00007FF75CE5CBC2]\nE       \t(No symbol) [0x00007FF75CE4CC83]\nE       \tBaseThreadInitThunk [0x00007FF9925053E0+16]\nE       \tRtlUserThreadStart [0x00007FF9946A485B+43]\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchElementException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <selenium.webdriver.remote.switch_to.SwitchTo object at 0x000001C792AA09D0>, frame_reference = 'passport_iframe'\n\n    def frame(self, frame_reference: Union[str, int, WebElement]) -> None:\n        \"\"\"Switches focus to the specified frame, by index, name, or\n        webelement.\n    \n        :Args:\n         - frame_reference: The name of the window to switch to, an integer representing the index,\n                            or a webelement that is an (i)frame to switch to.\n    \n        :Usage:\n            ::\n    \n                driver.switch_to.frame('frame_name')\n                driver.switch_to.frame(1)\n                driver.switch_to.frame(driver.find_elements(By.TAG_NAME, \"iframe\")[0])\n        \"\"\"\n        if isinstance(frame_reference, str):\n            try:\n                frame_reference = self._driver.find_element(By.ID, frame_reference)\n            except NoSuchElementException:\n                try:\n>                   frame_reference = self._driver.find_element(By.NAME, frame_reference)\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\switch_to.py:91: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:738: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001C792AA0AF0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...07FF75CE4CC83]\\\\n\\\\tBaseThreadInitThunk [0x00007FF9925053E0+16]\\\\n\\\\tRtlUserThreadStart [0x00007FF9946A485B+43]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"[name=\"passport_iframe\"]\"}\nE         (Session info: chrome=118.0.5993.90); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF75CEE8EF2+54786]\nE       \t(No symbol) [0x00007FF75CE55612]\nE       \t(No symbol) [0x00007FF75CD0A64B]\nE       \t(No symbol) [0x00007FF75CD4B79C]\nE       \t(No symbol) [0x00007FF75CD4B91C]\nE       \t(No symbol) [0x00007FF75CD86D87]\nE       \t(No symbol) [0x00007FF75CD6BEAF]\nE       \t(No symbol) [0x00007FF75CD84D02]\nE       \t(No symbol) [0x00007FF75CD6BC43]\nE       \t(No symbol) [0x00007FF75CD40941]\nE       \t(No symbol) [0x00007FF75CD41B84]\nE       \tGetHandleVerifier [0x00007FF75D237F52+3524194]\nE       \tGetHandleVerifier [0x00007FF75D28D800+3874576]\nE       \tGetHandleVerifier [0x00007FF75D285D7F+3843215]\nE       \tGetHandleVerifier [0x00007FF75CF85086+694166]\nE       \t(No symbol) [0x00007FF75CE60A88]\nE       \t(No symbol) [0x00007FF75CE5CA94]\nE       \t(No symbol) [0x00007FF75CE5CBC2]\nE       \t(No symbol) [0x00007FF75CE4CC83]\nE       \tBaseThreadInitThunk [0x00007FF9925053E0+16]\nE       \tRtlUserThreadStart [0x00007FF9946A485B+43]\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchElementException\n\nThe above exception was the direct cause of the following exception:\n\nself = <testcase.test_csdn_2.TestCaseLogin object at 0x000001C792AAF490>, setup1 = <pages.baidu_page.Login_baidu object at 0x000001C792AAFBB0>\nsetup2 = None, setup3 = None, phone = '18883245086', passwd = 'eb1019EBD11'\n\n    @pytest.mark.parametrize(\"phone,passwd\", [('18883245086', 'eb1019EBD11')])\n    def test_correct_login(self, setup1, setup2, setup3, phone, passwd):\n        \"\"\"\n        正确帐密登陆测试用例\n        :param setup: fixture\n        :return: 无返回值\n        \"\"\"\n        self.driver = setup1\n        # 断言\n        self.driver.asset_before_login_locator_text()\n        self.driver.click_before_login()\n>       self.driver.switch_login_iframe()\n\ntestcase\\test_csdn_2.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages\\baidu_page.py:53: in switch_login_iframe\n    self.switch_iframe(self.login_page_iframe_name)\ncommon\\base.py:106: in switch_iframe\n    self.driver.switch_to.frame(iframe_name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.switch_to.SwitchTo object at 0x000001C792AA09D0>, frame_reference = 'passport_iframe'\n\n    def frame(self, frame_reference: Union[str, int, WebElement]) -> None:\n        \"\"\"Switches focus to the specified frame, by index, name, or\n        webelement.\n    \n        :Args:\n         - frame_reference: The name of the window to switch to, an integer representing the index,\n                            or a webelement that is an (i)frame to switch to.\n    \n        :Usage:\n            ::\n    \n                driver.switch_to.frame('frame_name')\n                driver.switch_to.frame(1)\n                driver.switch_to.frame(driver.find_elements(By.TAG_NAME, \"iframe\")[0])\n        \"\"\"\n        if isinstance(frame_reference, str):\n            try:\n                frame_reference = self._driver.find_element(By.ID, frame_reference)\n            except NoSuchElementException:\n                try:\n                    frame_reference = self._driver.find_element(By.NAME, frame_reference)\n                except NoSuchElementException as exc:\n>                   raise NoSuchFrameException(frame_reference) from exc\nE                   selenium.common.exceptions.NoSuchFrameException: Message: passport_iframe\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\switch_to.py:93: NoSuchFrameException"}, "description": "\n        正确帐密登陆测试用例\n        :param setup: fixture\n        :return: 无返回值\n        ", "parameters": [{"name": "phone", "value": "'18883245086'"}, {"name": "passwd", "value": "'eb1019EBD11'"}], "start": 1698314669220, "stop": 1698314672841, "uuid": "ce8cd7b5-292b-4c64-a1d8-153cab88dc85", "historyId": "032e80e2a2b24bdc8149f0b422690aac", "testCaseId": "62e4f84ba0b842295022c024182922ff", "fullName": "testcase.test_csdn_2.TestCaseLogin#test_correct_login", "labels": [{"name": "parentSuite", "value": "testcase"}, {"name": "suite", "value": "test_csdn_2"}, {"name": "subSuite", "value": "TestCaseLogin"}, {"name": "host", "value": "LAPTOP-H65PT011"}, {"name": "thread", "value": "19048-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.test_csdn_2"}]}